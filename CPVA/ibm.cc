#include <stdio.h>
#include <iostream>
#include <stdlib.h>
using namespace std;

int main(int argc, char* argv[]) {
    std::system("ls -l > output.txt"); 
  return 0;
}

/*
void nonPoliceShell(){
fprintf(stderr,"",20);
}
*/